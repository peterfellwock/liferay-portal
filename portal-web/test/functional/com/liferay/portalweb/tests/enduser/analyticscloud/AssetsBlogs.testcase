@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.enabled = "true";
	property minimum.slave.ram = "32";
	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();

		ACUtils.addSiteAndPage();

		ACUtils.createBlogsAndAddToPage();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8387 | Test Summary: Blogs asset appears on list shows pages that the blog exists on"
	@ignore = "true"
	@priority = "5"
	test AssertAppearsOnListShowsPagesBlogExists {

		// TODO LRAC-8387 AssertAppearsOnListShowsPagesBlogExists

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8384 | Test Summary: Assert 180 day time filter in Blogs"
	@ignore = "true"
	@priority = "3"
	test AssertBlogsPageTImeFilter180Days {

		// TODO LRAC-8384 AssertBlogsPageTImeFilter180Days

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8374 | Test Summary: Blogs audience card shows expected amount of know and anonymous individuals"
	@priority = "5"
	test AudienceCardShowsExpectedAmountKnowAndAnonymousIndividualsInBlogs {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		for (var name : list "ac,liferay") {
			JSONUser.addUser(
				userEmailAddress = "${name}@liferay.com",
				userFirstName = "${name}",
				userLastName = "${name}",
				userScreenName = "${name}");
		}

		ACDXPSettings.syncNewContactData();

		for (var name : list "ac,liferay") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "${name}@liferay.com",
				userLoginFullName = "${name} ${name}");

			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");

			Pause(locator1 = "5000");
		}

		User.logoutPG();

		Navigator.gotoSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");

		ACUtils.closeAllSessions();

		Pause(locator1 = "30000");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToAssets();

		ACNavigation.switchTab(tabName = "Blogs");

		ACTimeFilter.clickTimeFilterButton();

		ACTimeFilter.setLast24Hours();

		ACNavigation.openItem(itemName = "Blogs AC Title");

		ACIndividualsDashboard.goToOverviewTab();

		ACNavigation.viewActiveSwitchTab(tabName = "Overview");

		ACUtils.assertAudienceCard(
			index = "1",
			percentageList = "66.67%,33.33%");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8375 | Test Summary: Blogs audience card shows expected amount of segmented and unsegmented individuals"
	@ignore = "true"
	@priority = "5"
	test AudienceCardShowsExpectedAmountSegmentedAndUnsegmentedInBlogs {

		// TODO LRAC-8375 AudienceCardShowsExpectedAmountSegmentedAndUnsegmentedInBlogs

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8378 | Test Summary: Blogs location card shows views by the expected location"
	@ignore = "true"
	@priority = "5"
	test BlogsLocationCardShowsViewsByExpectedLocation {

		// TODO LRAC-8378 BlogsLocationCardShowsViewsByExpectedLocation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8386 | Test Summary: Blogs views by technology card shows views by the expected browser"
	@priority = "5"
	test BlogsTechnologyCardShowsViewsByExpectedBrowser {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		task ("View the blog") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessions();

			Pause(locator1 = "30000");
		}

		task ("Switch to new property in AC and go to Blogs tab") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");

			ACNavigation.goToAssets();

			ACNavigation.switchTab(tabName = "Blogs");
		}

		task ("Go to the blogs overview") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACNavigation.openItem(itemName = "Blogs AC Title");
		}

		task ("Assert views by browsers metric") {
			ACNavigation.switchTabInCard(tabName = "Browsers");

			ACAssets.viewViewsByTechnologyTabActive(
				cardTitle = "Views by Technology",
				tabName = "Browsers");

			ACAssets.viewTechnologyBrowsersMetric(
				browserMetricValue = "Chrome",
				cardTitle = "Views by Technology",
				cssValue = "rgb(75, 155, 255)",
				percentageMetricValue = "100%");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8385 | Test Summary: Blogs views by technology card shows views by the expected device"
	@priority = "5"
	test BlogsTechnologyCardShowsViewsByExpectedDevice {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		task ("View the blog") {
			for (var n : list "1,2") {
				Navigator.gotoSitePage(
					pageName = "AC Page",
					siteName = "Site Name");

				BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");
			}
		}

		task ("Close sessions") {
			ACUtils.closeAllSessions();

			Pause(locator1 = "30000");
		}

		task ("Switch to new property in AC and go to Blogs tab") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");

			ACNavigation.goToAssets();

			ACNavigation.switchTab(tabName = "Blogs");
		}

		task ("Go to the blogs overview") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACNavigation.openItem(itemName = "Blogs AC Title");
		}

		task ("Assert views by devices metric") {
			ACAssets.viewTechnologyDeviceViewsAndPercentage(
				actionValue = "2 Views",
				cardTitle = "Views by Technology",
				deviceName = "Desktop",
				percentageValue = "100%");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8382 | Test Summary: The blogs list is searchable"
	@priority = "5"
	test CanBlogsListSearchable {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		ACUtils.createBlogsAndAddToPage(entryTitle = "Test 2");

		Navigator.gotoSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");

		Navigator.gotoSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		BlogsNavigator.gotoPG(entryTitle = "Test 2");

		ACUtils.closeAllSessions();

		Pause(locator1 = "30000");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToAssets();

		ACNavigation.switchTab(tabName = "Blogs");

		ACTimeFilter.clickTimeFilterButton();

		ACTimeFilter.setLast24Hours();

		ACUtils.searchBar(searchItem = "Blogs AC Title");

		ACAssets.viewAssets(assetName = "Blogs AC Title");

		ACUtils.searchBar(searchItem = "Test 2");

		ACAssets.viewAssets(assetName = "Test 2");

		ACUtils.searchBar(searchItem = "Should not be here");

		AssertTextEquals(
			key_noResultMessage = "There are no Blogs found.",
			locator1 = "ACAssets#NO_RESULTS_CONTENT_MESSAGE",
			value1 = "There are no Blogs found.");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8113 | Test Summary: Assert clicking a blog in the blogs list navigates to the blogs overview page"
	@priority = "5"
	test CanNavigatesToBlogsOverviewPage {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "ac@liferay.com",
			userFirstName = "ac",
			userLastName = "ac",
			userScreenName = "ac");

		ACDXPSettings.syncNewContactData();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "ac@liferay.com",
			userLoginFullName = "ac ac");

		for (var n : list "1,2,3,4") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");
		}

		ACUtils.closeAllSessions();

		Pause(locator1 = "30000");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToAssets();

		ACNavigation.switchTab(tabName = "Blogs");

		ACTimeFilter.clickTimeFilterButton();

		ACTimeFilter.setLast24Hours();

		ACNavigation.openItem(itemName = "Blogs AC Title");

		ACIndividualsDashboard.goToOverviewTab();

		ACNavigation.viewActiveSwitchTab(tabName = "Overview");

		for (var cardTitle : list "Visitors Behavior,Audience,Views by Location,Views by Technology,Asset Appears On") {
			ACCards.viewCards(cardTitle = "${cardTitle}");
		}

		ACAssets.viewVisitorsBehaviorMetric(
			metricTitle = "Views",
			metricValue = "4");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8383 | Test Summary: Custom Range time filter in Blogs assets page"
	@ignore = "true"
	@priority = "5"
	test CanUseCustomRangeBlogsAssetsPage {

		// TODO LRAC-8383 CanUseCustomRangeBlogsAssetsPage

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8114 | Test Summary: Blogs known individuals list shows individuals who have viewed the blog"
	@priority = "5"
	test KnownIndividualsListShowsIndividualsWhoHaveViewedBlog {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		for (var name : list "ac,liferay,dxp") {
			JSONUser.addUser(
				userEmailAddress = "${name}@liferay.com",
				userFirstName = "${name}",
				userLastName = "${name}",
				userScreenName = "${name}");
		}

		ACDXPSettings.syncNewContactData();

		for (var name : list "ac,liferay,dxp") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "${name}@liferay.com",
				userLoginFullName = "${name} ${name}");

			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");

			Pause(locator1 = "5000");
		}

		JSONUser.addUser(
			userEmailAddress = "userac@liferay.com",
			userFirstName = "userac",
			userLastName = "userac",
			userScreenName = "userac");

		User.logoutAndLoginPG(
			userEmailAddress = "userac@liferay.com",
			userFirstName = "userac",
			userLastName = "userac",
			userScreenName = "userac");

		Navigator.gotoSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");

		ACUtils.closeAllSessions();

		Pause(locator1 = "30000");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToAssets();

		ACNavigation.switchTab(tabName = "Blogs");

		ACTimeFilter.clickTimeFilterButton();

		ACTimeFilter.setLast24Hours();

		ACNavigation.openItem(itemName = "Blogs AC Title");

		ACIndividualsDashboard.goToKnownIndividualsTab();

		ACNavigation.viewActiveSwitchTab(tabName = "Known Individuals");

		ACTimeFilter.clickTimeFilterButton();

		ACTimeFilter.setLast24Hours();

		for (var name : list "ac,liferay,dxp") {
			AssertElementPresent(
				key_userName = "${name} ${name}",
				locator1 = "ACSegments#SEGMENT_MEMBERS");
		}

		AssertElementNotPresent(
			key_userName = "userac userac",
			locator1 = "ACSegments#SEGMENT_MEMBERS");
	}

	@description = "View all blogs in the property in assets"
	@priority = "5"
	test ViewAllBlogsShownInAssetList {
		ACUtils.createBlogsAndAddToPage(entryTitle = "Test 2");

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		for (var n : list "1,2") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");

			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			BlogsNavigator.gotoPG(entryTitle = "Test 2");
		}

		ACUtils.closeAllSessions();

		Pause(locator1 = "30000");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToAssets();

		ACNavigation.switchTab(tabName = "Blogs");

		ACTimeFilter.clickTimeFilterButton();

		ACTimeFilter.setLast24Hours();

		ACUtils.searchBar(searchItem = "Blogs AC Title");

		ACAssets.viewAssets(assetName = "Blogs AC Title");

		ACUtils.searchBar(searchItem = "Test 2");

		ACAssets.viewAssets(assetName = "Test 2");
	}

}