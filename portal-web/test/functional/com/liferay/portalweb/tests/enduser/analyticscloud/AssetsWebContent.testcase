@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.enabled = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property minimum.slave.ram = "32";
	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site and add a web content in this site") {
			ACUtils.addSiteAndPage();

			ACUtils.createWCAndAddToPage();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8456 | Test Summary: Web content appears on card shows the pages that the web content appears on"
	@ignore = "true"
	@priority = "5"
	test AssertAppearsOnListShowsPagesWebContentExists {

		// TODO LRAC-8456 AssertAppearsOnListShowsPagesWebContentExists

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8446 | Test Summary: Assert 180 day time filter in Assets"
	@ignore = "true"
	@priority = "3"
	test AssertAssetsPageTimeFilter180Days {

		// TODO LRAC-8446 AssertAssetsPageTimeFilter180Days

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8448 | Test Summary: Web content audience card shows expected amount of known and anonymous individuals"
	@priority = "5"
	test AudienceCardShowsExpectedAmountKnowAndAnonymousIndividualsInWC {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		for (var name : list "ac,liferay") {
			JSONUser.addUser(
				userEmailAddress = "${name}@liferay.com",
				userFirstName = "${name}",
				userLastName = "${name}",
				userScreenName = "${name}");
		}

		ACDXPSettings.syncNewContactData();

		for (var name : list "ac,liferay") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "${name}@liferay.com",
				userLoginFullName = "${name} ${name}");

			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			Pause(locator1 = "5000");
		}

		User.logoutPG();

		Navigator.gotoSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		ACUtils.closeAllSessions();

		Pause(locator1 = "30000");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToAssets();

		ACNavigation.switchTab(tabName = "Web Content");

		ACTimeFilter.clickTimeFilterButton();

		ACTimeFilter.setLast24Hours();

		ACNavigation.openItem(itemName = "Web Content AC Title");

		ACIndividualsDashboard.goToOverviewTab();

		ACNavigation.viewActiveSwitchTab(tabName = "Overview");

		ACUtils.assertAudienceCard(
			index = "1",
			percentageList = "66.67%,33.33%");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8449 | Test Summary: Web content audience card shows expected amount of segmented and unsegmented individuals"
	@ignore = "true"
	@priority = "5"
	test AudienceCardShowsExpectedAmountSegmentedAndUnsegmentedInWC {

		// TODO LRAC-8449 AudienceCardShowsExpectedAmountSegmentedAndUnsegmentedInWC

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8444 | Test Summary: Custom Range time filter in Web Content assets page"
	@ignore = "true"
	@priority = "4"
	test CanAssertWebContentTimeFIlterCustom {

		// TODO LRAC-8444 CanAssertWebContentTimeFIlterCustom

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8130 | Test Summary: Click a web content in the web content list navigates to the web content overview page"
	@priority = "5"
	test CanNavigateToWebContentOverviewPage {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "ac@liferay.com",
			userFirstName = "ac",
			userLastName = "ac",
			userScreenName = "ac");

		ACDXPSettings.syncNewContactData();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "ac@liferay.com",
			userLoginFullName = "ac ac");

		for (var n : list "1,2,3") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		ACUtils.closeAllSessions();

		Pause(locator1 = "30000");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToAssets();

		ACNavigation.switchTab(tabName = "Web Content");

		ACTimeFilter.clickTimeFilterButton();

		ACTimeFilter.setLast24Hours();

		ACNavigation.openItem(itemName = "Web Content AC Title");

		ACIndividualsDashboard.goToOverviewTab();

		ACNavigation.viewActiveSwitchTab(tabName = "Overview");

		for (var cardTitle : list "Visitors Behavior,Audience,Views by Location,Views by Technology,Asset Appears On") {
			ACCards.viewCards(cardTitle = "${cardTitle}");
		}

		ACAssets.viewVisitorsBehaviorMetric(
			metricTitle = "Views",
			metricValue = "3");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8441 | Test Summary: Web content list is searchable"
	@priority = "5"
	test CanSearchWebContentList {
		task ("Add pages and add web content to earch of the page") {
			for (var layoutName : list "AC Page 2,AC Page 3") {
				ACUtils.addSiteAndPage(layoutName = "${layoutName}");
			}

			for (var n : list "2,3") {
				ACUtils.createWCAndAddToPage(
					layoutName = "AC Page ${n}",
					webContentTitle = "Web Content AC Title ${n}");
			}
		}

		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Add a new user in DXP") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Sign in with the new user to visit the site pages") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");

			for (var pageName : list "AC Page,AC Page 2,AC Page 3") {
				Navigator.gotoSitePage(
					pageName = "${pageName}",
					siteName = "Site Name");
			}
		}

		task ("Switch to new property in AC") {
			ACUtils.closeAllSessions();

			Pause(locator1 = "30000");

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Go to Web Content assets") {
			ACNavigation.goToAssets();

			ACNavigation.switchTab(tabName = "Web Content");
		}

		task ("Choose Last 24 Hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Search the Web Contents") {
			ACUtils.searchBar(searchItem = "Web Content AC Title");

			for (var assetName : list "Web Content AC Title,Web Content AC Title 2,Web Content AC Title 3") {
				ACAssets.viewAssets(assetName = "${assetName}");
			}

			ACUtils.searchBar(searchItem = "2");

			ACAssets.viewAssets(assetName = "Web Content AC Title 2");

			ACUtils.searchBar(searchItem = "3");

			ACAssets.viewAssets(assetName = "Web Content AC Title 3");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8445 | Test Summary: Assert Web Content 180 Days Time Filter In Web Content Assets Page"
	@ignore = "true"
	@priority = "5"
	test CanUse180DaysTimeFilterInWebContentOverview {

		// TODO LRAC-8445 CanUse180DaysTimeFilterInWebContentOverview

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8443 | Test Summary: Assert Custom Range time filter in assets"
	@ignore = "true"
	@priority = "5"
	test CanUseCustomRangeTimeFilterInWebContentOverview {

		// TODO LRAC-8443 CanUseCustomRangeTimeFilterInWebContentOverview

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8131 | Test Summary: Web content known individuals shows which individuals interact with the web content"
	@priority = "5"
	test KnownIndividualsShowsWhichIndividualsInteractWithWebContent {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		for (var name : list "ac,liferay,dxp") {
			JSONUser.addUser(
				userEmailAddress = "${name}@liferay.com",
				userFirstName = "${name}",
				userLastName = "${name}",
				userScreenName = "${name}");
		}

		ACDXPSettings.syncNewContactData();

		for (var name : list "ac,liferay,dxp") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "${name}@liferay.com",
				userLoginFullName = "${name} ${name}");

			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			Pause(locator1 = "5000");
		}

		JSONUser.addUser(
			userEmailAddress = "userac@liferay.com",
			userFirstName = "userac",
			userLastName = "userac",
			userScreenName = "userac");

		User.logoutAndLoginPG(
			userEmailAddress = "userac@liferay.com",
			userFirstName = "userac",
			userLastName = "userac",
			userScreenName = "userac");

		Navigator.gotoSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		ACUtils.closeAllSessions();

		Pause(locator1 = "30000");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToAssets();

		ACNavigation.switchTab(tabName = "Web Content");

		ACTimeFilter.clickTimeFilterButton();

		ACTimeFilter.setLast24Hours();

		ACNavigation.openItem(itemName = "Web Content AC Title");

		ACIndividualsDashboard.goToKnownIndividualsTab();

		ACNavigation.viewActiveSwitchTab(tabName = "Known Individuals");

		ACTimeFilter.clickTimeFilterButton();

		ACTimeFilter.setLast24Hours();

		for (var name : list "ac,liferay,dxp") {
			AssertElementPresent(
				key_userName = "${name} ${name}",
				locator1 = "ACSegments#SEGMENT_MEMBERS");
		}

		AssertElementNotPresent(
			key_userName = "userac userac",
			locator1 = "ACSegments#SEGMENT_MEMBERS");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8125 | Test Summary: Web content list shows all web content in a list"
	@priority = "5"
	test ViewAllWebContentShownInAssetList {
		for (var layoutName : list "AC Page 2,AC Page 3") {
			ACUtils.addSiteAndPage(layoutName = "${layoutName}");
		}

		for (var n : list "2,3") {
			ACUtils.createWCAndAddToPage(
				layoutName = "AC Page ${n}",
				webContentTitle = "Web Content AC Title ${n}");
		}

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "ac@liferay.com",
			userFirstName = "ac",
			userLastName = "ac",
			userScreenName = "ac");

		ACDXPSettings.syncNewContactData();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "ac@liferay.com",
			userLoginFullName = "ac ac");

		for (var pageName : list "AC Page,AC Page 2,AC Page 3") {
			Navigator.gotoSitePage(
				pageName = "${pageName}",
				siteName = "Site Name");
		}

		ACUtils.closeAllSessions();

		Pause(locator1 = "30000");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToAssets();

		ACNavigation.switchTab(tabName = "Web Content");

		ACTimeFilter.clickTimeFilterButton();

		ACTimeFilter.setLast24Hours();

		for (var assetName : list "Web Content AC Title,Web Content AC Title 2,Web Content AC Title 3") {
			ACAssets.viewAssets(assetName = "${assetName}");
		}
	}

	@description = "Web content visitor behavior card shows expected amount of views"
	@priority = "5"
	test VisitorBehaviorCardShowsExpectedAmountOfViewsInWC {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		for (var n : list "1,2,3,4") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		ACUtils.closeAllSessions();

		Pause(locator1 = "30000");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToAssets();

		ACNavigation.switchTab(tabName = "Web Content");

		ACTimeFilter.clickTimeFilterButton();

		ACTimeFilter.setLast24Hours();

		ACNavigation.openItem(itemName = "Web Content AC Title");

		ACAssets.viewVisitorsBehaviorMetric(
			metricTitle = "Views",
			metricValue = "4");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8451 | Test Summary: Web content submissions by location card shows expected views by location"
	@priority = "5"
	test WebContentLocationCardShowsViewsByExpectedLocation {
		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Connect the DXP to AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("View the site page") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Get the ip country") {
			var country = ACUtils.getIPCountry();
		}

		task ("Close sessions") {
			ACUtils.closeAllSessions();

			Pause(locator1 = "30000");
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Navigate to Web Content tab") {
			ACNavigation.goToAssets();

			ACNavigation.switchTab(tabName = "Web Content");
		}

		task ("Select the Last 24 Hours in time filter") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Access to the web content report entry") {
			ACNavigation.openItem(itemName = "Web Content AC Title");
		}

		task ("View the time filter of Views by Location map is Last 24 Hours") {
			ACTimeFilter.assertCurrentTimeFilterRange(
				cardName = "Views by Location",
				timeFilterRange = "Last 24 hours");
		}

		task ("View the views by location info shown in geomap") {
			AssertElementNotPresent(
				key_noResultMessage = "There are no views on any location on the selected period.",
				locator1 = "ACAssets#NO_RESULTS_CONTENT_MESSAGE");

			ACCards.viewGeomapContainer(cardTitle = "Views by Location");

			ACCards.viewGeomapTableText(
				cardTitle = "Views by Location",
				leftText = "${country}",
				rightText = "1 100%");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8454 | Test Summary: Web content submissions by technology card shows views by expected browser"
	@priority = "5"
	test WebContentTechnologyCardShowsViewsByExpectedBrowser {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "ac@liferay.com",
			userFirstName = "ac",
			userLastName = "ac",
			userScreenName = "ac");

		ACDXPSettings.syncNewContactData();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "ac@liferay.com",
			userLoginFullName = "ac ac");

		for (var n : list "1,2,3") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		ACUtils.closeAllSessions();

		Pause(locator1 = "30000");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToAssets();

		ACNavigation.switchTab(tabName = "Web Content");

		ACTimeFilter.clickTimeFilterButton();

		ACTimeFilter.setLast24Hours();

		ACNavigation.openItem(itemName = "Web Content AC Title");

		ACIndividualsDashboard.goToOverviewTab();

		ACNavigation.viewActiveSwitchTab(tabName = "Overview");

		ACNavigation.switchTabInCard(tabName = "Browsers");

		ACAssets.viewViewsByTechnologyTabActive(
			cardTitle = "Views by Technology",
			tabName = "Browsers");

		ACAssets.viewTechnologyBrowsersMetric(
			browserMetricValue = "Chrome",
			cardTitle = "Views by Technology",
			cssValue = "rgb(75, 155, 255)",
			percentageMetricValue = "100%");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8453 | Test Summary: Web content submissions by technology card shows views by expected device"
	@priority = "5"
	test WebContentTechnologyCardShowsViewsByExpectedDevice {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "ac@liferay.com",
			userFirstName = "ac",
			userLastName = "ac",
			userScreenName = "ac");

		ACDXPSettings.syncNewContactData();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "ac@liferay.com",
			userLoginFullName = "ac ac");

		for (var n : list "1,2,3") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		ACUtils.closeAllSessions();

		Pause(locator1 = "30000");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToAssets();

		ACNavigation.switchTab(tabName = "Web Content");

		ACTimeFilter.clickTimeFilterButton();

		ACTimeFilter.setLast24Hours();

		ACNavigation.openItem(itemName = "Web Content AC Title");

		ACIndividualsDashboard.goToOverviewTab();

		ACNavigation.viewActiveSwitchTab(tabName = "Overview");

		ACAssets.viewTechnologyDeviceViewsAndPercentage(
			actionValue = "3 Views",
			cardTitle = "Views by Technology",
			deviceName = "Desktop",
			percentageValue = "100%");
	}

}