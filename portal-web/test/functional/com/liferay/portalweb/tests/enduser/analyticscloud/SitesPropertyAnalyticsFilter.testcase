@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.enabled = "true";
	property minimum.slave.ram = "32";
	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8319 | Test Summary: Custom Range time period filter in Sites"
	@ignore = "true"
	@priority = "5"
	test CustomRangeTimePeriodFilterSites {

		// TODO LRAC-8319

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8321 | Test Summary: 1st user access and no property was selected yet"
	@ignore = "true"
	@priority = "4"
	test FirstAccessAndNoProperty {

		// TODO LRAC-8321

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8317 | Test Summary: 180 Days time period filter in Sites"
	@priority = "3"
	test PeriodFilter180Days {
		property portal.upstream = "quarantine";

		// AC Refactor: the test needs data from a past date
		// AC Refactor ticket: LRAC-8723

		task ("Site and blogs creation and connection with AC") {
			ACUtils.addSiteAndPage();

			ACUtils.createBlogsAndAddToPage(entryTitle = "Test 2");

			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Interation with pages") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			BlogsNavigator.gotoPG(entryTitle = "Test 2");

			ACUtils.closeAllSessions();
		}

		task ("AC launch") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Asset 180 Days time period filter") {

			// It is not possible to perform the assert because this test needs data from the past

			ACNavigation.switchTab(tabName = "Overview");

			ACTimeFilter.clickTimeFilterButton(cardName = "${propertyName} Activities");

			ACTimeFilter.setLast180Days();

			ACUtils.assertXAxisTimedGraph(parentName = "${propertyName} Activities");

			for (var cardTitle : list "Top Pages,Acquisitions,Visitors by Day and Time,Search Terms,Interests,Sessions by Location,Session Technology") {
				ACCards.viewCards(cardTitle = "${cardTitle}");

				ACTimeFilter.clickTimeFilterButton(cardName = "${cardTitle}");

				ACTimeFilter.setLast180Days();
			}
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8318 | Test Summary: Last Year time period filter in Sites"
	@priority = "3"
	test PeriodFilterLastYear {
		property portal.upstream = "quarantine";

		// AC Refactor: the test needs data from a past date
		// AC Refactor ticket: LRAC-8726

		task ("Site and blogs creation and connection with AC") {
			ACUtils.addSiteAndPage();

			ACUtils.createBlogsAndAddToPage(entryTitle = "Test 2");

			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Interation with pages") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			BlogsNavigator.gotoPG(entryTitle = "Test 2");

			ACUtils.closeAllSessions();
		}

		task ("AC launch") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Asset Last Year time period filter") {

			// It is not possible to perform the assert because this test needs data from the past

			ACNavigation.switchTab(tabName = "Overview");

			ACTimeFilter.clickTimeFilterButton(cardName = "${propertyName} Activities");

			ACTimeFilter.setLastYear();

			ACUtils.assertXAxisTimedGraph(parentName = "${propertyName} Activities");

			for (var cardTitle : list "Top Pages,Acquisitions,Visitors by Day and Time,Search Terms,Interests,Sessions by Location,Session Technology") {
				ACCards.viewCards(cardTitle = "${cardTitle}");

				ACTimeFilter.clickTimeFilterButton(cardName = "${cardTitle}");

				ACTimeFilter.setLastYear();
			}
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8320 | Test Summary: Property field is displayed in empty state when no property is available"
	@priority = "4"
	test PropertyFieldWhenNoProperty {
		task ("AC launch and delete all properties") {
			ACUtils.launchAC();

			ACSettings.deleteAllProperties();
		}

		task ("Asset that no longer properties exists") {
			AssertElementPresent(locator1 = "ACDXPSettings#AVAILABLE_NO_PROPERTIES_FOUND");
		}

		task ("Asset that there are no more properties on the sites page") {
			Navigator.gotoBack();

			AssertTextEquals(
				locator1 = "ACSidebar#PROPERTY_MENU_NO_PROPERTIES",
				value1 = "No Properties");

			AssertElementPresent(locator1 = "TextInput#NO_PROPERTIES_AVAILABLE_TEXT");

			AssertElementNotPresent(locator1 = "ACSidebar#PROPERTY_MENU_ITEM_BY_NAME");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8323 | Test Summary: A user lost access to a given property (because the admin removed the user's access or someone deleted the property of the system)"
	@ignore = "true"
	@priority = "4"
	test UserLostAccess {

		// TODO LRAC-8323

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8322 | Test Summary: A user (independent of user role) should only see the properties they are invited to by the AC admin or the properties which the user is owner"
	@priority = "4"
	test UserShouldOnlySeePropertiesAreInvitedByACAdminOrPropertiesWhichUserOwner {
		task ("AC launch and go to the porpreties menu") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			ACSettings.goToProperties();
		}
		task ("Create property 1, check if it was created and add an admin user") {
			ACProperties.addNewProperty(propertyName = "Property Name 1");

			ACProperties.assertNewCreatedProperty(propertyName = "Property Name 1");

			ACProperties.addUserProperty(emailAddress = "bryan.cheung@faro.io");
		}
		task ("Go back to the properties menu, create property 2, check if it was created and add an admin user") {
			ACSettings.goToProperties();

			ACProperties.addNewProperty(propertyName = "Property Name 2");

			ACProperties.assertNewCreatedProperty(propertyName = "Property Name 2");

			ACProperties.addUserProperty(emailAddress = "corbin.murakami@faro.io");
		}
		task ("Go back to the properties menu, create property 3, check if it was created and select all users as admin") {
			ACSettings.goToProperties();

			ACProperties.addNewProperty(propertyName = "Property Name 3");

			ACProperties.assertNewCreatedProperty(propertyName = "Property Name 3");

			ACSettings.goToProperties();
		}
		task ("Log in as the user corbin.murakami@faro.io and go to the properties menu") {
			ACWorkspace.signOut();

			ACLogin.loginAs(
				emailAddress = "corbin.murakami@faro.io",
				password = "test");

			ACWorkspace.openWorkspace();

			ACNavigation.goToSettings();

			ACSettings.goToProperties();
		}
		task ("Checks if only property 2 and property 3 are present") {
			AssertElementNotPresent(
				locator1 = "ACSettings#PROPERTIES_ASSET_TITLE_LIST",
				propertyName = "Property Name 1");

			ACProperties.assertPropertyTitleList(propertyName = "Property Name 2");

			ACProperties.assertPropertyTitleList(propertyName = "Property Name 3");
		}
	}

}