@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Content Page Name",
			type = "content");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a use case for LPS-109298. Each tab of Tabs fragment is able to contain any elements in content page."
	@priority = "5"
	test AddElementToEachPanel {
		property portal.acceptance = "true";

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Tabs");

		PageEditor.addElementToTab(
			collectionName = "Layout Elements",
			fragmentName = "Container",
			index = "2",
			navItem = "Tab 1",
			navTab = "Fragments",
			position = "1");

		var n = "2";

		for (var fragmentName : list "Heading,Tabs") {
			var index = ${n} + 1;

			PageEditor.addElementToTab(
				collectionName = "Basic Components",
				fragmentName = "${fragmentName}",
				index = "${index}",
				navItem = "Tab ${n}",
				navTab = "Fragments",
				position = "1");

			var n = ${n} + 1;
		}

		PageEditor.addElementToTab(
			index = "9",
			navItem = "Tab 4",
			navTab = "Widgets",
			portletName = "Asset Publisher",
			position = "5");

		PageEditor.clickPublish();

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");
	}

	@description = "This is for LPS-109298. Each tab of Tabs fragment is able to contain any elements in custom master."
	@priority = "4"
	test AddElementToEachPanelInMasterPageTemplate {
		property testray.main.component.name = "Page Templates";

		task ("Add a custom master") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");
		}

		MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			dropTarget = "Footer",
			fragmentName = "Tabs",
			scope = "Master");

		PageEditor.addElementToTab(
			collectionName = "Layout Elements",
			fragmentName = "Container",
			index = "2",
			navItem = "Tab 1",
			navTab = "Fragments",
			position = "1");

		var n = "2";

		for (var fragmentName : list "Heading,Tabs") {
			var index = ${n} + 1;

			PageEditor.addElementToTab(
				collectionName = "Basic Components",
				fragmentName = "${fragmentName}",
				index = "${index}",
				navItem = "Tab ${n}",
				navTab = "Fragments",
				position = "1");

			var n = ${n} + 1;
		}

		PageEditor.addElementToTab(
			index = "9",
			navItem = "Tab 4",
			navTab = "Widgets",
			portletName = "Asset Publisher",
			position = "5");

		Button.click(button = "Publish Master");

		Alert.viewSuccessMessage();

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");
	}

	@description = "This is a use case for LPS-109298. Can add elements above and below Tabs fragment to page."
	@priority = "4"
	test AddFragmentsAroundTabs {
		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Tabs");

		DragAndDrop.javaScriptDragAndDropToUp(
			key_collectionName = "Basic Components",
			key_fragmentName = "Button",
			locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
			locator2 = "//*[contains(@class,'component-tabs')]",
			value1 = "");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading",
			targetFragmentName = "Tabs");

		PageEditor.viewFragmentOrder(
			fragmentName = "Button",
			position = "1");

		PageEditor.viewFragmentOrder(
			fragmentName = "Tabs",
			position = "2");

		PageEditor.viewFragmentOrder(
			fragmentName = "Heading",
			position = "3");
	}

	@description = "This is a use case for LPS-109298. Can add Tabs fragment to container of Layout elements."
	@priority = "3"
	test AddTabsToLayoutElements {
		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Container");

		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Grid",
			targetFragmentName = "Container");

		PageEditor.addElementToContainer(
			collectionName = "Basic Components",
			fragmentName = "Tabs",
			navTab = "Fragments");

		DragAndDrop.javaScriptDragAndDropToObject(
			key_collectionName = "Basic Components",
			key_columnNumber = "1",
			key_fragmentName = "Tabs",
			key_position = "1",
			locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
			locator2 = "PageEditor#GRID_COLUMN",
			value1 = "");

		PageEditor.waitForAutoSave();

		AssertElementPresent(
			key_columnNumber = "1",
			key_elementHeader = "//div[contains(@class,'page-editor__topper')][1]/div[contains(.,'Tabs')]//li[contains(@class,'title')]",
			key_position = "1",
			locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
	}

	@description = "This is for LPS-109298. If move the Drop Zone of master to one tab, only can add elements to that tab in content page."
	@priority = "4"
	test MoveDropZoneIntoPanel {
		property testray.main.component.name = "Page Templates";

		task ("Add a custom master") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");
		}

		MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			dropTarget = "Footer",
			fragmentName = "Tabs",
			scope = "Master");

		Click(
			key_fragmentName = "Drop Zone",
			locator1 = "Fragment#FRAGMENT_BODY");

		DragAndDrop.javaScriptDragAndDropToObject(
			key_dragFragmentName = "Drop Zone",
			key_index = "2",
			locator1 = "Fragment#FRAGMENT_HEADER_DRAG_HANDLER",
			locator2 = "PageEditor#FRAGMENT_WITH_DROP_TARGET",
			value1 = "");

		Button.click(button = "Publish Master");

		Alert.viewSuccessMessage();

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(
			masterLayoutName = "Custom Masters Page Template",
			pageName = "Test Page Name");

		AssertVisible(
			key_fragmentName = "tabs",
			locator1 = "PageEditor#FRAGMENT_INHERITED_FROM_CUSTOM_MASTERS");

		AssertVisible(
			key_content = "Place fragments here.",
			key_fragmentClass = "content",
			key_position = "1",
			locator1 = "Fragment#PAGE_EDITOR_NO_FRAGMENTS_MESSAGE");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Card");

		AssertElementNotPresent(
			key_index = "2",
			locator1 = "PageEditor#FRAGMENT_WITH_DROP_TARGET");

		for (var navItem : list "Tab 2,Tab 3,Tab 4") {
			PageEditor.gotoTabsFragmentNavItem(navItem = "${navItem}");

			AssertElementNotPresent(
				key_fragmentName = "Place fragments here.",
				locator1 = "PageEditor#FRAGMENT_INHERITED_FROM_CUSTOM_MASTERS");

			AssertElementNotPresent(
				key_index = "2",
				locator1 = "PageEditor#FRAGMENT_WITH_DROP_TARGET");
		}

		PageEditor.clickPublish();

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");
	}

	@description = "This is for LPS-109298. Can not add elements to each tab of Tabs fragment that is inherited from custom master in content page."
	@priority = "4"
	test ViewInheriatedTabsWithoutDropzoneInContentPage {
		property testray.main.component.name = "Page Templates";

		task ("Add a custom master") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");
		}

		MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			dropTarget = "Footer",
			fragmentName = "Tabs",
			scope = "Master");

		Button.click(button = "Publish Master");

		Alert.viewSuccessMessage();

		SitePages.openPagesAdmin(siteURLKey = "test-site-name");

		ContentPages.addPage(
			masterLayoutName = "Custom Masters Page Template",
			pageName = "Test Page Name");

		AssertVisible(
			key_fragmentName = "tabs",
			locator1 = "PageEditor#FRAGMENT_INHERITED_FROM_CUSTOM_MASTERS");

		AssertTextEquals(
			locator1 = "PageEditor#FRAGMENT_DROP_TARGET",
			value1 = "Place fragments here.");

		AssertElementNotPresent(
			key_fragmentName = "Place fragments here.",
			locator1 = "PageEditor#FRAGMENT_INHERITED_FROM_CUSTOM_MASTERS");

		for (var navItem : list "Tab 2,Tab 3,Tab 4") {
			PageEditor.gotoTabsFragmentNavItem(navItem = "${navItem}");

			AssertElementNotPresent(
				key_fragmentName = "Place fragments here.",
				locator1 = "PageEditor#FRAGMENT_INHERITED_FROM_CUSTOM_MASTERS");

			AssertElementNotPresent(
				key_index = "2",
				locator1 = "PageEditor#FRAGMENT_WITH_DROP_TARGET");
		}

		PageEditor.clickPublish();

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");
	}

	@description = "This is a test for LPS-121223. View nested content when increase number of tabs."
	@priority = "4"
	test ViewNestedContentWhenIncreaseNumberOfTabs {
		task ("Add a Tabs fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Tabs");
		}

		task ("Edit text in editable field of nav buttons") {
			for (var n : list "1,2,3,4") {
				PageEditor.editFragmentText(
					fragmentName = "Tabs",
					id = "title${n}",
					text = "My Tab ${n}");
			}
		}

		task ("Add fragments to drop zone of each tab") {
			var n = "1";

			for (var fragmentName : list "Button,Card,Heading,HTML") {
				var index = ${n} + 1;

				PageEditor.addElementToTab(
					collectionName = "Basic Components",
					fragmentName = "${fragmentName}",
					index = "${index}",
					navItem = "My Tab ${n}",
					navTab = "Fragments",
					position = "1");

				var n = ${n} + 1;
			}
		}

		task ("Increase number of tabs") {
			PageEditor.gotoConfiguration(fragmentName = "Tabs");

			PageEditor.configureFragment(numberOfTabs = "6");
		}

		task ("View nested content in drop zone of each tab") {
			var n = "1";

			for (var fragmentName : list "Button,Card,Heading,HTML") {
				PageEditor.gotoTabsFragmentNavItem(navItem = "My Tab ${n}");

				AssertElementPresent(
					key_fragmentName = "${fragmentName}",
					key_inFragmentName = "Tabs",
					locator1 = "Fragment#FRAGMENT_BODY_IN_FRAGMENT");

				var n = ${n} + 1;
			}

			var position = "1";

			for (var n : list "5,6") {
				PageEditor.gotoTabsFragmentNavItem(navItem = "Tab ${n}");

				AssertVisible(
					key_content = "Place fragments here.",
					key_fragmentClass = "content",
					key_position = "${position}",
					locator1 = "Fragment#PAGE_EDITOR_NO_FRAGMENTS_MESSAGE");

				var position = ${position} + 1;
			}
		}
	}

	@description = "This is a use case for LPS-111274. The selected Tabs fragment should always stay selected when click on the tabs of it."
	@priority = "5"
	test ViewTopperBarWhenSwitchToOtherPanel {
		property portal.acceptance = "true";

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Tabs");

		AssertElementPresent(
			key_fragmentName = "Tabs",
			locator1 = "Fragment#FRAGMENT_HEADER");

		for (var navItem : list "Tab 2,Tab 3,Tab 4") {
			PageEditor.gotoTabsFragmentNavItem(navItem = "${navItem}");

			AssertVisible(
				key_fragmentName = "Tabs",
				locator1 = "Fragment#FRAGMENT_HEADER");
		}
	}

}