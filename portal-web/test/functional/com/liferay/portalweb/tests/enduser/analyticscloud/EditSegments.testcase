@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.enabled = "true";
	property minimum.slave.ram = "32";
	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();

		ACUtils.addSiteAndPage();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8588 | Test Summary: Assert segment overview shows criteria"
	@ignore = "true"
	@priority = "3"
	test AssertSegmentOverviewShowsCriteria {

		// TODO LRAC-8588 AssertSegmentOverviewShowsCriteria pending implementation

	}

	@description = "Edit a dynamic segment and check the edits are saved"
	@priority = "5"
	test CanEditDynamicSegmentCheckEditSaved {
		ACUtils.createBlogsAndAddToPage();

		Navigator.openURL();

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "ac@liferay.com",
			userFirstName = "ac",
			userLastName = "ac",
			userScreenName = "ac");

		ACDXPSettings.syncNewContactData();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "ac@liferay.com",
			userLoginFullName = "ac ac");

		Navigator.gotoSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");

		ACUtils.closeAllSessions();

		Pause(locator1 = "30000");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		ACSegments.nameSegment(segmentName = "Dynamic Segment Test");

		ACSegments.addSegmentField(segmentField = "Viewed Blog");

		ACSegments.editWebBehaviorCriterion(
			indexField = "1",
			occurenceNumber = "4",
			searchTerm = "Blogs AC Title");

		ACSegments.saveSegment();

		ACNavigation.switchTab(tabName = "Membership");

		AssertTextEquals(
			locator1 = "ACSegments#NO_MEMBER_TITLE",
			value1 = "There are no items found.");

		ACUtils.launchDXP(userEmailAddress = "ac@liferay.com");

		for (var n : list "1,2,3") {
			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");
		}

		ACUtils.closeAllSessions();

		Pause(locator1 = "30000");

		ACUtils.launchAC();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Dynamic Segment Test");

		ACSegments.viewSegmentCriteriaWebBehavior(
			activitiesOption = "has",
			atLeastMost = "at least",
			occurenceNumber = "4",
			searchTerm = "'Blogs AC Title'",
			timeOption = "since",
			timePeriod = "Last 24 hours");

		ACNavigation.switchTab(tabName = "Membership");

		AssertElementPresent(
			key_userName = "ac ac",
			locator1 = "ACSegments#SEGMENT_MEMBERS");

		ACNavigation.goToSegments();

		ACSegments.editSegment(searchTerm = "Dynamic Segment Test");

		ACSegments.editWebBehaviorCriterion(
			activitiesOption = "has not",
			atLeastMost = "at most",
			indexField = "1",
			occurenceNumber = "5",
			timeOption = "ever");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Dynamic Segment Test");

		ACSegments.viewSegmentCriteriaWebBehavior(
			activitiesOption = "has not",
			atLeastMost = "at most",
			occurenceNumber = "5",
			searchTerm = "'Blogs AC Title'",
			timeOption = "ever");

		ACNavigation.switchTab(tabName = "Membership");

		AssertTextEquals(
			locator1 = "ACSegments#NO_MEMBER_TITLE",
			value1 = "There are no items found.");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8135 | Test Summary: Edit a static segment and check the edits are saved"
	@priority = "5"
	test CanEditStaticSegmentCheckEditSaved {
		ACUtils.createBlogsAndAddToPage();

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		for (var name : list "ac,liferay") {
			JSONUser.addUser(
				userEmailAddress = "${name}@liferay.com",
				userFirstName = "${name}",
				userLastName = "${name}",
				userScreenName = "${name}");
		}

		ACDXPSettings.syncNewContactData();

		for (var name : list "ac,liferay") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "${name}@liferay.com",
				userLoginFullName = "${name} ${name}");

			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");

			Pause(locator1 = "5000");
		}

		ACUtils.closeAllSessions();

		Pause(locator1 = "30000");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createStaticSegment();

		ACSegments.nameSegment(segmentName = "Static Segment Test");

		ACSegments.addStaticMember(tableMember = "ac ac");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Static Segment Test");

		ACNavigation.switchTab(tabName = "Membership");

		AssertElementPresent(
			key_userName = "ac ac",
			locator1 = "ACSegments#SEGMENT_MEMBERS");

		ACNavigation.goToSegments();

		ACSegments.editSegment(searchTerm = "Static Segment Test");

		ACSegments.addStaticMember(tableMember = "liferay liferay");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Static Segment Test");

		ACNavigation.switchTab(tabName = "Membership");

		for (var name : list "ac,liferay") {
			AssertElementPresent(
				key_userName = "${name} ${name}",
				locator1 = "ACSegments#SEGMENT_MEMBERS");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8136 | Test Summary: Rename Individuals Segment"
	@priority = "5"
	test CanRenameIndividualsSegment {
		ACUtils.createBlogsAndAddToPage();

		Navigator.openURL();

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "ac@liferay.com",
			userFirstName = "ac",
			userLastName = "ac",
			userScreenName = "ac");

		ACDXPSettings.syncNewContactData();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "ac@liferay.com",
			userLoginFullName = "ac ac");

		Navigator.gotoSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");

		ACUtils.closeAllSessions();

		Pause(locator1 = "30000");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		ACSegments.nameSegment(segmentName = "Dynamic Segment Test");

		ACSegments.addSegmentField(segmentField = "Viewed Blog");

		ACSegments.editWebBehaviorCriterion(
			indexField = "1",
			searchTerm = "Blogs AC Title");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.viewSegmentName(searchTerm = "Dynamic Segment Test");

		ACSegments.editSegment(searchTerm = "Dynamic Segment Test");

		ACSegments.nameSegment(segmentName = "Rename Dynamic Segment Test");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.viewSegmentName(searchTerm = "Rename Dynamic Segment Test");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8585 | Test Summary: It is not possible to add a duplicate user to a static segment"
	@priority = "4"
	test CantDuplicateUserToStaticSegment {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		for (var name : list "ac,liferay") {
			JSONUser.addUser(
				userEmailAddress = "${name}@liferay.com",
				userFirstName = "${name}",
				userLastName = "${name}",
				userScreenName = "${name}");
		}

		ACDXPSettings.syncNewContactData();

		for (var name : list "ac,liferay") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "${name}@liferay.com",
				userLoginFullName = "${name} ${name}");

			Navigator.gotoSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			Pause(locator1 = "5000");
		}

		ACUtils.closeAllSessions();

		Pause(locator1 = "30000");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createStaticSegment();

		ACSegments.nameSegment(segmentName = "Static Segment Test");

		ACSegments.addStaticMember(tableMember = "ac ac");

		Click(locator1 = "ACSegments#ADD_MEMBERS_BUTTON");

		AssertElementPresent(
			key_memberName = "ac ac",
			locator1 = "ACSegments#DISABLED_MEMBER");

		ACNavigation.clickCancelButton();

		ACSegments.addStaticMember(tableMember = "liferay liferay");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8589 | Test Summary: Editor shows static segment label"
	@priority = "3"
	test EditorShowsStaticSegmentLabel {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "ac@liferay.com",
			userFirstName = "ac",
			userLastName = "ac",
			userScreenName = "ac");

		ACDXPSettings.syncNewContactData();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "ac@liferay.com",
			userLoginFullName = "ac ac");

		Navigator.gotoSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		ACUtils.closeAllSessions();

		Pause(locator1 = "30000");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createStaticSegment();

		ACSegments.nameSegment(segmentName = "Static Segment Test");

		ACSegments.addStaticMember(tableMember = "ac ac");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.editSegment(searchTerm = "Static Segment Test");

		ACSegments.viewEditorLabel(labelName = "Static Segment");

		ACUtils.assertPageTitle(pageTitle = "Edit Individuals Segment");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8587 | Test Summary: Paginate list of members to be added to the segment"
	@ignore = "true"
	@priority = "3"
	test PaginateListOfMembersToBeAddedToTheSegment {

		// TODO LRAC-8587 PaginateListOfMembersToBeAddedToTheSegment pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8598 | Test Summary: Segment List kebab menu contains Edit and Delete buttons"
	@ignore = "true"
	@priority = "3"
	test SegmentListKebabMenuContainsEditAndDeleteButtons {

		// TODO LRAC-8598 SegmentListKebabMenuContainsEditAndDeleteButtons pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8586 | Test Summary: Sort the Segment 'Add Members' Modal"
	@ignore = "true"
	@priority = "3"
	test SortSegmentAddMembersModal {

		// TODO LRAC-8586 SortSegmentAddMembersModal pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8590 | Test Summary: Undo Adding a Segment Member in the Edit Modal"
	@ignore = "true"
	@priority = "4"
	test UndoAddingSegmentMemberInTheEditModal {

		// TODO LRAC-8590 UndoAddingSegmentMemberInTheEditModal pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8591 | Test Summary: Undo all members from being added"
	@ignore = "true"
	@priority = "3"
	test UndoAllMembersFromBeingAdded {

		// TODO LRAC-8591 UndoAllMembersFromBeingAdded pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8593 | Test Summary: Undo Deleting a Segment Member in the Edit Modal"
	@ignore = "true"
	@priority = "4"
	test UndoDeletingASegmentMemberInTheEditModal {

		// TODO LRAC-8593 UndoDeletingASegmentMemberInTheEditModal pending implementation

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8596 | Test Summary: Undo one static member from being added"
	@ignore = "true"
	@priority = "3"
	test UndoOneStaticMemberFromBeingAdded {

		// TODO LRAC-8596 UndoOneStaticMemberFromBeingAdded pending implementation

	}

}