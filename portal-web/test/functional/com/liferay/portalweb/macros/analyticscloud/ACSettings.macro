definition {

	macro addCSVDataSource {
		ACSettings.goToDataSources();

		Button.click(button = "Add Data Source");

		Click(
			key_sourceType = "CSV File",
			locator1 = "ACSettings#DXP_DATA_SOURCE_CHOOSE_OPTION");

		Type(
			key_text = "Name Data Source",
			locator1 = "TextInput#ANY",
			value1 = "${dataSourceName}");

		UploadCommonFile.uploadCommonFileHiddenNoMouseOver(
			locator1 = "TextInput#FILE",
			value1 = "${sourceFileName}");

		WaitForVisible(locator1 = "ACSettings#FILE_UPLOAD_SUCCESS_ICON");

		WaitForElementNotPresent(
			key_text = "Next",
			locator1 = "Button#ANY_DISABLED");

		Button.clickNext();

		if (isSet(selectAnalyticsCloudField)) {
			Button.click(button = "Select Analytics Cloud Field");

			if (isSet(newField)) {
				Button.click(button = "New Field");

				Type(
					key_text = "New Field Name",
					locator1 = "TextInput#ANY",
					value1 = "${fieldName}");

				Button.click(button = "Select");

				MenuItem.click(menuItem = "${fieldType}");

				WaitForElementNotPresent(
					key_text = "Create",
					locator1 = "Button#ANY_DISABLED");

				Button.click(button = "Create");
			}
			else {
				MenuItem.click(menuItem = "${fieldName}");
			}
		}

		WaitForVisible(locator1 = "ACSettings#LOADING_ANIMATION");

		WaitForElementNotPresent(locator1 = "ACSettings#LOADING_ANIMATION");

		WaitForElementNotPresent(
			key_text = "Done",
			locator1 = "Button#ANY_DISABLED");

		Button.click(button = "Done");

		AssertVisible(
			key_title = "${dataSourceName}",
			locator1 = "Header#H3_TITLE");
	}

	macro addKeywords {
		Click(locator1 = "ACSettings#KEYWORD_BUTTON");

		Type(
			locator1 = "ACSettings#KEYWORD_TEXTFIELD",
			value1 = "${keyword}");

		Click(locator1 = "ACSettings#KEYWORD_SEND_BUTTON");
	}

	macro addUser {
		Click(locator1 = "ACSettings#INVITE_USERS_BUTTON");

		Type(
			locator1 = "ACSettings#INVITE_USERS_INPUT",
			value1 = "${userInvite}");

		Click(locator1 = "ACSettings#KEYWORD_SEND_BUTTON");
	}

	macro assertAddonsDetails {
		AssertElementPresent(locator1 = "ACUsage#USAGE_ADDONS_LIMITS");

		AssertElementPresent(locator1 = "ACUsage#USAGE_ADDONS_PRICE");
	}

	macro assertCanChooseDataSourceOptions {
		Click(
			key_sourceType = "Liferay DXP",
			locator1 = "ACSettings#DXP_DATA_SOURCE_CHOOSE_OPTION");

		AssertElementPresent(locator1 = "ACSettings#TOKEN_INPUT_FIELD");

		Click(locator1 = "ACUtils#MODAL_CLOSE_BUTTON");

		Click(
			key_sourceType = "Salesforce",
			locator1 = "ACSettings#DXP_DATA_SOURCE_CHOOSE_OPTION");

		AssertElementPresent(
			itemName = "Configure Salesforce",
			locator1 = "ACSettings#ITEM_ON_LIST");

		Click(
			key_breadcrumbName = "Add Data Source",
			locator1 = "BreadcrumbPortlet#BREADCRUMB_PAGE");

		Click(
			key_sourceType = "CSV File",
			locator1 = "ACSettings#DXP_DATA_SOURCE_CHOOSE_OPTION");

		AssertElementPresent(
			key_title = "CSV File",
			locator1 = "Header#H3_TITLE");
	}

	@summary = "Asserts the individuals usage value \
	@param individualUsageValue"
	macro assertIndividualsUsage() {
		AssertTextEquals(
			locator1 = "ACSettings#INDIVIDUALS_USAGE_METRIC",
			value1 = "${individualUsageValue}");
	}

	macro assertKeywords {
		var key_KeywordName = "${keyword}";

		AssertTextEquals(
			locator1 = "ACSettings#KEYWORD_NAME",
			value1 = "${keyword}");
	}

	@summary = "Asserts the page views usage value \
	@param pageViewsUsageValue"
	macro assertPageViewsUsage() {
		AssertTextEquals(
			locator1 = "ACSettings#PAGE_VIEWS_USAGE_METRIC",
			value1 = "${pageViewsUsageValue}");
	}

	macro assertPlanDetails {
		var key_planName = "${planName}";
		AssertElementPresent(locator1 = "ACUsage#PLAN_NAME");

		AssertElementPresent(
			key_planItem = "Individuals",
			key_planLimits = "${individualsLimit}",
			key_tableName = "limits",
			locator1 = "ACUsage#USAGE_PLAN_LIMITS_TABLE");

		AssertElementPresent(
			key_planItem = "Page Views",
			key_planLimits = "${pageViews}",
			key_tableName = "limits",
			locator1 = "ACUsage#USAGE_PLAN_LIMITS_TABLE");

		AssertElementPresent(
			key_planItem = "Users",
			key_planLimits = "${usersLimit}",
			key_tableName = "limits",
			locator1 = "ACUsage#USAGE_PLAN_LIMITS_TABLE");

		AssertElementPresent(
			key_planItem = "${individualsAddOns}",
			key_planLimits = "${individualsAddOnsPrice}",
			key_tableName = "addons",
			locator1 = "ACUsage#USAGE_PLAN_LIMITS_TABLE");

		AssertElementPresent(
			key_planItem = "${pageViewsAddOns}",
			key_planLimits = "${pageViewsAddOnsPrice}",
			key_tableName = "addons",
			locator1 = "ACUsage#USAGE_PLAN_LIMITS_TABLE");
	}

	macro assertRequestLog {
		for (var emailAdress : list "${emailAdresses}",) {
			if ("${jobType}" == "Delete") {
				AssertElementPresent(
					key_emailAdress = "${emailAdress}",
					key_requestType = "${jobType}",
					locator1 = "ACDataControlAndPrivacy#REQUEST_LOG_TABLE");

				AssertElementPresent(
					key_emailAdress = "${emailAdress}",
					key_requestType = "Suppress",
					locator1 = "ACDataControlAndPrivacy#REQUEST_LOG_TABLE");
			}
			else {
				AssertElementPresent(
					key_emailAdress = "${emailAdress}",
					key_requestType = "${jobType}",
					locator1 = "ACDataControlAndPrivacy#REQUEST_LOG_TABLE");
			}
		}
	}

	@summary = "Asserts the users shown in list"
	macro assertUserList() {
		AssertTextEquals(
			locator1 = "ACSettings#USER_LIST",
			value1 = "${userName}");
	}

	macro assertUserListEmail {
		AssertTextEquals(
			locator1 = "ACSettings#USER_LIST_EMAIL",
			value1 = "${userEmail}");
	}

	macro clickGenericAddOrConfirmationButton {
		Click(locator1 = "ACDXPSettings#AC_GENERIC_ADD_OR_CONFIRMATION_BUTTON");
	}

	macro createRequestLogByEmail {
		var key_fieldType = "${fieldType}";

		ACSettings.goToDataControlAndPrivacy();

		Click(locator1 = "ACDataControlAndPrivacy#REQUEST_LOG");

		Click(locator1 = "ACDataControlAndPrivacy#CREATE_REQUEST");

		for (var jobType : list "${jobTypes}") {
			Click(
				key_jobType = "${jobType}",
				locator1 = "ACDataControlAndPrivacy#JOB_TYPE");
		}

		Click(
			key_fieldType = "Find by Email",
			locator1 = "ACDataControlAndPrivacy#DATA_ID");

		Click(locator1 = "ACDataControlAndPrivacy#FIND_BY_EMAIL_FIELD");

		for (var emailAdress : list "${emailAdresses}") {
			Click(
				key_emailAdress = "${emailAdress}",
				locator1 = "ACDataControlAndPrivacy#FIND_EMAIL_FIELD");
		}

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	@summary = "Deletes all data source"
	macro deleteAllDataSource {
		if (IsElementNotPresent(locator1 = "ACSettings#EXIT_SETTINGS_BUTTON")) {
			ACNavigation.goToSettings();
		}

		ACSettings.goToDataSources();

		while (IsElementPresent(locator1 = "ACSettings#ITEM_TABLE")) {
			ACSettings.deleteDataSource();
		}
	}

	@summary = "Deletes all properties \
	@param propertyList the list of properties you want to delete (optional)"
	macro deleteAllProperties {
		if (IsElementNotPresent(locator1 = "ACSettings#EXIT_SETTINGS_BUTTON")) {
			ACNavigation.goToSettings();
		}

		ACSettings.goToProperties();

		KeyPress(
			locator1 = "ACSettings#SELECT_ALL_CHECKBOX",
			value1 = "\SPACE");

		Click(locator1 = "ACSettings#GENERIC_DELETE_BUTTON");

		Copy(locator1 = "ACSettings#DELETE_CONFIRMATION_MESSAGE");

		Click(locator1 = "ACSettings#DELETE_CONFIRMATION_INPUT");

		Paste(locator1 = "ACSettings#DELETE_CONFIRMATION_INPUT");

		Click(locator1 = "ACSettings#DELETE_CONFIRMATION_BUTTON");
	}

	@summary = "Deletes a specific data source \
	@param dataSourceName the name of the data source you want to delete"
	macro deleteDataSource {
		if (IsElementNotPresent(locator1 = "ACSettings#EXIT_SETTINGS_BUTTON")) {
			ACNavigation.goToSettings();
		}

		if (isSet(dataSourceName)) {
			ACUtils.searchBar(searchItem = "${dataSourceName}");

			ACNavigation.openItem(itemName = "${dataSourceName}");
		}

		else {
			Click(locator1 = "ACSettings#ITEM_TABLE");
		}

		WaitForVisible(locator1 = "ACSettings#DELETE_BUTTON_DATA_SOURCE");

		if (IsElementPresent(key_text = "Edit CSV", locator1 = "Button#ANY")) {
			var dataSourceName = selenium.getText("//div[contains(@class,'sheet-header')]//h3");

			Click(locator1 = "ACSettings#DELETE_BUTTON_DATA_SOURCE");

			Copy(locator1 = "ACSettings#DELETE_CONFIRMATION_MESSAGE");

			Click(locator1 = "ACSettings#DELETE_CONFIRMATION_INPUT");

			Paste(locator1 = "ACSettings#DELETE_CONFIRMATION_INPUT");

			Click(locator1 = "ACSettings#DELETE_BUTTON_DATA_SOURCE");

			AssertTextEquals(
				locator1 = "Modal#HEADER",
				value1 = "Delete Data Source");

			AssertTextPresent(
				locator1 = "Modal#BODY",
				value1 = "Are you sure you want to delete ${dataSourceName}?");

			AssertTextPresent(
				locator1 = "Modal#BODY",
				value1 = "You will permanently lose all contacts and analytics data collected from this data source. You will not be able to undo this action.");

			Click(locator1 = "ACSettings#DELETE_BUTTON_DATA_SOURCE");
		}

		else {
			var dataSourceName = selenium.getText("//h3");

			Click(locator1 = "ACSettings#DELETE_BUTTON_DATA_SOURCE");

			AssertTextEquals(
				locator1 = "Modal#HEADER",
				value1 = "Delete ${dataSourceName}");

			Copy(locator1 = "ACSettings#DELETE_CONFIRMATION_MESSAGE");

			Click(locator1 = "ACSettings#DELETE_CONFIRMATION_INPUT");

			Paste(locator1 = "ACSettings#DELETE_CONFIRMATION_INPUT");

			Click(locator1 = "ACSettings#DELETE_CONFIRMATION_BUTTON");
		}
	}

	macro deleteKeywordCheckbox {
		if (IsVisible(locator1 = "ACSettings#KEYWORD_NAME", value1 = "${keyword}")) {
			Click(locator1 = "ACSettings#KEYWORD_DELETE_CHECKBOX");

			Click(locator1 = "ACSettings#DELETE_FROM_TOOLBAR");

			Click(locator1 = "ACSettings#CONTINUE_BUTTON");
		}
	}

	macro deleteKeywordIcon {
		if (IsVisible(locator1 = "ACSettings#KEYWORD_NAME", value1 = "${keyword}")) {
			Click(locator1 = "ACSettings#KEYWORD_DELETE_ICON");

			Click(locator1 = "ACSettings#CONTINUE_BUTTON");
		}
	}

	macro deleteUser {
		if (IsVisible(locator1 = "ACSettings#USER_LIST_EMAIL", value1 = "${userDelete}")) {
			Click(locator1 = "ACSettings#DELETE_USER");

			Click(locator1 = "ACSettings#CONTINUE_BUTTON");
		}
	}

	macro getDXPInstanceId {
		ACSettings.goToDataSources();

		ACUtils.searchBar(searchItem = "${dataSourceName}");

		ACNavigation.openItem(itemName = "${dataSourceName}");

		AssertTextEquals(
			inputFieldId = "dataSourceName",
			locator1 = "TextInput#INPUT_ID",
			value1 = "${dataSourceName}");

		var dxpInstanceId = selenium.getElementValue("//input[contains(@id,'dxpInstanceId')]");

		return "${dxpInstanceId}";
	}

	macro getPropertyId {
		ACSettings.goToProperties();

		ACUtils.searchBar(searchItem = "${propertyName}");

		ACNavigation.openItem(itemName = "${propertyName}");

		WaitForVisible(
			locator1 = "ACSettings#HEADER_TITLE",
			title = "${propertyName}");

		var propertyId = selenium.getText("ACSettings#HEADER_DESCRIPTION");
		var propertyId = StringUtil.extractDigits("${propertyId}");

		return "${propertyId}";
	}

	macro goToApis {
		ACSettings.goToSettingsNavigation(settingsNavigation = "apis");
	}

	macro goToDataControlAndPrivacy {
		ACSettings.goToSettingsNavigation(settingsNavigation = "data-privacy");
	}

	macro goToDataSources {
		ACSettings.goToSettingsNavigation(settingsNavigation = "data-source");
	}

	macro goToDefinitions {
		ACSettings.goToSettingsNavigation(settingsNavigation = "definitions");
	}

	macro goToProperties {
		ACSettings.goToSettingsNavigation(settingsNavigation = "properties");
	}

	macro goToSettingsNavigation {
		var key_SettingsNavigation = "${settingsNavigation}";

		Click(locator1 = "ACSettings#SETTINGS_NAVIGATION");
	}

	macro goToUsage {
		ACSettings.goToSettingsNavigation(settingsNavigation = "usage");
	}

	macro goToUserManagement {
		ACSettings.goToSettingsNavigation(settingsNavigation = "users");
	}

	macro goToWorkspace {
		ACSettings.goToSettingsNavigation(settingsNavigation = "settings/workspace");
	}

	@summary = "Takes the token from Analytics Clouds to use on during the DXP connection process"
	macro takeTokenFromAnalyticsCloud {
		ACSettings.goToDataSources();

		Click(locator1 = "ACDXPSettings#AC_GENERIC_ADD_OR_CONFIRMATION_BUTTON");

		Click(locator1 = "ACSettings#DXP_DATA_SOURCE_OPTION");

		Copy(locator1 = "ACSettings#TOKEN_INPUT_FIELD");
	}

}